// Generated by LiveScript 1.4.0
(function(){
  var localGet, localSet, localGetOrIssue, sid, sco, fid, pco, displayWindow, socket, sendMessage, parseMessage;
  localGet = function(name){
    return localStorage.getItem(name);
  };
  localSet = function(name, value){
    return localStorage.setItem(name, value);
  };
  localGetOrIssue = function(name){
    var value;
    if ((value = localGet(name)) == null) {
      localSet(name, value = (Math.random() * Math.pow(256, 16)).toString(36));
    }
    return value;
  };
  sid = localGetOrIssue('sid');
  sco = localGet('sco');
  fid = localGetOrIssue('fid');
  pco = location.pathname.replace(/^\//, '');
  if (pco === '') {
    pco = null;
  }
  console.log("sid", sid);
  console.log("fid", fid);
  console.log("sco", sco);
  console.log("pco", pco);
  displayWindow = null;
  socket = new WebSocket("ws://" + location.host + "/");
  sendMessage = function(command, params){
    console.warn("->", JSON.stringify([command, params]));
    return socket.send(JSON.stringify([command, params]));
  };
  parseMessage = function(message){
    return JSON.parse(message);
  };
  socket.onopen = function(event){
    return sendMessage("connect", {
      sid: sid,
      fid: fid,
      sco: sco,
      pco: pco
    });
  };
  socket.onmessage = function(event){
    var ref$, command, params, fid, sco, pco, url, qrcode, msg;
    console.log("RECEIVED", event.data);
    ref$ = parseMessage(event.data), command = ref$[0], params = ref$[1];
    switch (command) {
    case 'connected':
      fid = params.fid, sco = params.sco;
      localSet('fid', fid);
      localSet('sco', sco);
      return $('#info').text("f:" + fid + ":" + sco + " / s:" + sid);
    case 'paircode':
      pco = params.pco;
      url = location.origin + "/" + pco;
      qrcode = new QRCode("test", {
        width: 256,
        height: 256,
        colorDark: '#000000',
        colorLight: '#ffffff',
        correctLevel: QRCode.CorrectLevel.H
      });
      qrcode.makeCode(url);
      return $('#url').text(url);
    case 'show':
      url = params.url;
      if (displayWindow) {
        displayWindow.close();
      }
      return setTimeout(function(){
        return displayWindow = window.open(url, 'screen_farm_display');
      }, 100);
    case 'error':
      msg = params.msg;
      return console.error("Backend says:", msg);
    default:
      throw "Unknown command: " + command;
    }
  };
}).call(this);

//# sourceMappingURL=script.js.map
